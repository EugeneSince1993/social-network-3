{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","mainPhoto","contact","postsBlock","posts","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","keys","contacts","map","key","s","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","currentUserId","authorizedUserId","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Post","alt","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","component","name","validate","required","placeholder","MyPosts","React","memo","postsElements","toConsumableArray","reverse","p","MyPosts_Post_Post","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","withRouter","Component","match","useMatch","assign","ProfileContainer","userId","this","params","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","components_Profile_Profile","compose","auth","isAuth"],"mappings":"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","file":"static/js/2.6e774934.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3e1uN\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Koeb\",\"contact\":\"ProfileInfo_contact__1kbRn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3SnDt\",\"posts\":\"MyPosts_posts__eK3-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3oQ7U\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      { !editMode &&\r\n        <div>\r\n          <b>Status: </b>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"-----\"}\r\n          </span>\r\n        </div>\r\n      }\r\n      { editMode &&\r\n        <div>\r\n          <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {\r\n        error &&\r\n        <div className={style.formSummaryError}>\r\n          {error}\r\n        </div>\r\n      }\r\n      <div>\r\n        <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: { createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"}) }\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        { createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea) }\r\n      </div>\r\n      <div>\r\n        <b>About me</b>:\r\n        { createField(\"About me\", \"aboutMe\", [], Textarea) }\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:\r\n        {\r\n          Object.keys(profile.contacts)\r\n            .map(key => {\r\n              return (\r\n                <div key={key} className={s.contact}>\r\n                  <b>{key}</b>: {createField(key, \"contacts.\" + key, [], Input)}\r\n                </div>\r\n                // <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n              );\r\n            })\r\n        }\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus,\r\n                       currentUserId, authorizedUserId, savePhoto, saveProfile}) => {\r\n\r\n  let isOwner = currentUserId == authorizedUserId;\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img\r\n          src={profile.photos.large || userPhoto}\r\n          className={s.mainPhoto}\r\n        />\r\n        { isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} /> }\r\n        { editMode\r\n          ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n          : <ProfileData goToEditMode={ () => { setEditMode(true); } } profile={profile} isOwner={isOwner} /> }\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n  return (\r\n    <div>\r\n      {\r\n        isOwner &&\r\n          <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n          </div>\r\n      }\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {\r\n        profile.lookingForAJob &&\r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:\r\n        {\r\n          Object.keys(profile.contacts)\r\n            .map(key => {\r\n              return (\r\n                <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n              );\r\n            })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src=\"https://img2.freepng.ru/20180920/yko/kisspng-computer-icons-portable-network-graphics-avatar-ic-5ba3c66df14d32.3051789815374598219884.jpg\"\r\n        alt=\"\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newPostText\"\r\n          validate={[ required, maxLength10 ]}\r\n          placeholder={\"Post message\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nlet AddNewPostFormRedux = reduxForm({ form: \"ProfileAddNewPostForm\" })(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(\r\n  props => {\r\n    let postsElements = [...props.posts].reverse().map(\r\n      p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let onAddPost = (values) => {\r\n      props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n      <div className={s.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n        <div className={s.posts}>\r\n          {postsElements}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n  };\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        savePhoto={props.savePhoto}\r\n        currentUserId={props.currentUserId}\r\n        authorizedUserId={props.authorizedUserId}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useMatch} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nexport const withRouter = (Component) => {\r\n  let RouterComponent = (props) => {\r\n    const match = useMatch('/profile/:userId/');\r\n    return <Component {...props} match={match} />;\r\n  };\r\n  return RouterComponent;\r\n};\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        currentUserId={this.props.match.params.userId}\r\n        authorizedUserId={this.props.authorizedUserId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } ),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}